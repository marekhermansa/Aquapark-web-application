// <auto-generated />
using System;
using AquaparkApplication;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AquaparkApplication.Migrations
{
    [DbContext(typeof(AquaparkDbContext))]
    [Migration("20190604200715_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("AquaparkApplication.Models.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("MaxAmountOfPeople");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<int?>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Attractions");

                    b.HasData(
                        new { Id = 1, MaxAmountOfPeople = 5.0, Name = "Sauna 1", ZoneId = 1 },
                        new { Id = 2, MaxAmountOfPeople = 5.0, Name = "Sauna 2", ZoneId = 1 },
                        new { Id = 3, MaxAmountOfPeople = 5.0, Name = "Sauna 3", ZoneId = 1 },
                        new { Id = 4, MaxAmountOfPeople = 7.0, Name = "Sauna 4", ZoneId = 1 },
                        new { Id = 5, MaxAmountOfPeople = 3.0, Name = "Sauna 5", ZoneId = 1 },
                        new { Id = 6, MaxAmountOfPeople = 2.0, Name = "Sauna 6", ZoneId = 1 },
                        new { Id = 7, MaxAmountOfPeople = 8.0, Name = "Sauna 7", ZoneId = 1 },
                        new { Id = 8, MaxAmountOfPeople = 25.0, Name = "Basen 1", ZoneId = 2 },
                        new { Id = 9, MaxAmountOfPeople = 25.0, Name = "Basen 2", ZoneId = 2 },
                        new { Id = 10, MaxAmountOfPeople = 30.0, Name = "Basen 3", ZoneId = 2 },
                        new { Id = 11, MaxAmountOfPeople = 20.0, Name = "Basen 4", ZoneId = 2 },
                        new { Id = 12, MaxAmountOfPeople = 5.0, Name = "Spa 1", ZoneId = 3 },
                        new { Id = 13, MaxAmountOfPeople = 5.0, Name = "Spa 2", ZoneId = 3 },
                        new { Id = 14, MaxAmountOfPeople = 10.0, Name = "Spa 3", ZoneId = 3 }
                    );
                });

            modelBuilder.Entity("AquaparkApplication.Models.AttractionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttractionId");

                    b.Property<DateTime?>("FinishTime");

                    b.Property<int>("PositionId");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("PositionId");

                    b.ToTable("AttractionHistories");
                });

            modelBuilder.Entity("AquaparkApplication.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfOrder");

                    b.Property<int?>("UserDataId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserDataId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AquaparkApplication.Models.PeriodicDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FinishTime");

                    b.Property<DateTime>("StartTime");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("PeriodicDiscounts");

                    b.HasData(
                        new { Id = 1, FinishTime = new DateTime(2019, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified), StartTime = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Value = 0.80m }
                    );
                });

            modelBuilder.Entity("AquaparkApplication.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanBeUsed");

                    b.Property<int?>("OrderId");

                    b.Property<int?>("PeriodicDiscountId");

                    b.Property<int?>("SocialClassDiscountId");

                    b.Property<int?>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PeriodicDiscountId");

                    b.HasIndex("SocialClassDiscountId");

                    b.HasIndex("TicketId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("AquaparkApplication.Models.SocialClassDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SocialClassName")
                        .HasMaxLength(30);

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.ToTable("SocialClassDiscounts");

                    b.HasData(
                        new { Id = 1, SocialClassName = "Emeryt 50%", Value = 0.50m },
                        new { Id = 2, SocialClassName = "Student 80%", Value = 0.20m },
                        new { Id = 3, SocialClassName = "Weteran 25%", Value = 0.75m },
                        new { Id = 4, SocialClassName = "Dziecko 10%", Value = 0.90m },
                        new { Id = 5, SocialClassName = "Normalny 100%", Value = 0.00m }
                    );
                });

            modelBuilder.Entity("AquaparkApplication.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Days");

                    b.Property<double>("EndHour");

                    b.Property<int>("Months");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int?>("PeriodicDiscountId");

                    b.Property<decimal>("Price");

                    b.Property<double>("StartHour");

                    b.Property<int?>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("PeriodicDiscountId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new { Id = 1, Days = 1, EndHour = 12.0, Months = 0, Name = "Basen - Bilet poranny 6:00-12:00", Price = 30.00m, StartHour = 6.0, ZoneId = 2 },
                        new { Id = 2, Days = 1, EndHour = 18.0, Months = 0, Name = "Basen - Bilet poranny 12:00-18:00", Price = 35.00m, StartHour = 12.0, ZoneId = 2 },
                        new { Id = 3, Days = 1, EndHour = 24.0, Months = 0, Name = "Basen - Bilet poranny 18:00-24:00", Price = 40.00m, StartHour = 18.0, ZoneId = 2 },
                        new { Id = 4, Days = 1, EndHour = 24.0, Months = 0, Name = "Basen - Bilet całodniowy", Price = 60.00m, StartHour = 0.0, ZoneId = 2 },
                        new { Id = 5, Days = 1, EndHour = 24.0, Months = 0, Name = "Sauna - Bilet całodniowy", Price = 80.00m, StartHour = 0.0, ZoneId = 1 },
                        new { Id = 6, Days = 1, EndHour = 24.0, Months = 0, Name = "Spa - Bilet całodniowy", Price = 200.00m, StartHour = 0.0, ZoneId = 3 }
                    );
                });

            modelBuilder.Entity("AquaparkApplication.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(30);

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .HasMaxLength(40);

                    b.Property<string>("Surname")
                        .HasMaxLength(30);

                    b.Property<Guid>("UserGuid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AquaparkApplication.Models.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.Property<string>("Surname")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("UsersData");
                });

            modelBuilder.Entity("AquaparkApplication.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("MaxAmountOfPeople");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Zones");

                    b.HasData(
                        new { Id = 1, MaxAmountOfPeople = 35.0, Name = "Strefa saun" },
                        new { Id = 2, MaxAmountOfPeople = 100.0, Name = "Strefa basenów" },
                        new { Id = 3, MaxAmountOfPeople = 20.0, Name = "Strefa spa" }
                    );
                });

            modelBuilder.Entity("AquaparkApplication.Models.ZoneHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("FinishTime");

                    b.Property<int>("PositionId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("ZoneId");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("ZoneId");

                    b.ToTable("ZoneHistories");
                });

            modelBuilder.Entity("AquaparkApplication.Models.Attraction", b =>
                {
                    b.HasOne("AquaparkApplication.Models.Zone", "Zone")
                        .WithMany("Attractions")
                        .HasForeignKey("ZoneId");
                });

            modelBuilder.Entity("AquaparkApplication.Models.AttractionHistory", b =>
                {
                    b.HasOne("AquaparkApplication.Models.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AquaparkApplication.Models.Position", "Position")
                        .WithMany("AttractionHistories")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AquaparkApplication.Models.Order", b =>
                {
                    b.HasOne("AquaparkApplication.Models.UserData", "UserData")
                        .WithMany()
                        .HasForeignKey("UserDataId");

                    b.HasOne("AquaparkApplication.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AquaparkApplication.Models.Position", b =>
                {
                    b.HasOne("AquaparkApplication.Models.Order")
                        .WithMany("Positions")
                        .HasForeignKey("OrderId");

                    b.HasOne("AquaparkApplication.Models.PeriodicDiscount", "PeriodicDiscount")
                        .WithMany()
                        .HasForeignKey("PeriodicDiscountId");

                    b.HasOne("AquaparkApplication.Models.SocialClassDiscount", "SocialClassDiscount")
                        .WithMany()
                        .HasForeignKey("SocialClassDiscountId");

                    b.HasOne("AquaparkApplication.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("AquaparkApplication.Models.Ticket", b =>
                {
                    b.HasOne("AquaparkApplication.Models.PeriodicDiscount", "PeriodicDiscount")
                        .WithMany("Tickets")
                        .HasForeignKey("PeriodicDiscountId");

                    b.HasOne("AquaparkApplication.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");
                });

            modelBuilder.Entity("AquaparkApplication.Models.ZoneHistory", b =>
                {
                    b.HasOne("AquaparkApplication.Models.Position", "Position")
                        .WithMany("ZoneHistories")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AquaparkApplication.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
